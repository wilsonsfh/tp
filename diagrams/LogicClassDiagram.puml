@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic as LogicPackage {

package "Parser Classes" as ParserClasses{
Class "<<interface>>\nParser" as Parser
}
Class XYZCommand
Class CommandResult
Class "{abstract}\nCommand" as Command {
    +execute(): CommandResult throws CommandException
}


Class "<<interface>>\nLogic" as Logic
Class LogicManager {
    +FILE_OPS_ERROR_FORMAT: String
    +FILE_OPS_PERMISSION_ERROR_FORMAT:String
    -model: Model
    -storage: Storage
    -addressBookParser: AddressBookParser
}

package Model {
Class HiddenModel #FFFFFF
}

package Storage {
}

package Exception {
    Class CommandException {
        +CommandException(message: String)
        +CommandException(message: String, cause: Throwable)
    }
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .right.|> Logic
LogicManager -right->"1" ParserClasses
ParserClasses ..> XYZCommand : <<create>>

XYZCommand -up-|> Command
LogicManager .left.> Command : <<call>>

LogicManager --> Model
LogicManager --> Storage
Storage --[hidden] Model
Command .[hidden]up.> Storage
Command .right.> Model
note right of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult : <<create>>

Command ..> CommandException : <<throws>>
@enduml
